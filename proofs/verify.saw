import "fe.cry";

print "Loading LLVM module...";
m <- llvm_load_module "curve25519.bc";

let fresh_fe nm = do {
    let ty = llvm_array 10 (llvm_int 32);
    fe <- crucible_fresh_var nm ty;
    fep <- crucible_alloc ty;
    crucible_points_to fep (crucible_term fe);
    return (fep, fe);
};

let fe_binop_spec op = do {
    (fp, f) <- fresh_fe "f";
    (gp, g) <- fresh_fe "g";
    (hp, h) <- fresh_fe "h";
    crucible_precond {{ valid_fe e25 e24 f }};
    crucible_precond {{ valid_fe e25 e24 g }};

    crucible_execute_func [hp, fp, gp];

    crucible_points_to fp (crucible_term f);
    crucible_points_to gp (crucible_term g);
    let h' = {{ op f g }};
    crucible_points_to hp (crucible_term h');
    crucible_postcond {{ valid_fe e26 e25 h' }};
};

let fe_unop_spec op = do {
    (fp, f) <- fresh_fe "f";
    (hp, h) <- fresh_fe "h";
    crucible_precond {{ valid_fe e25 e24 f }};
    
    crucible_execute_func [hp, fp];

    crucible_points_to fp (crucible_term f);
    let h' = {{ op f }};
    crucible_points_to hp (crucible_term h');
    crucible_postcond {{ valid_fe e25 e24 h' }};
};

let prefix = "crypto_sign_ed25519_ref10_";
let fname nm = str_concat prefix nm;

let neg = {{ negate }};
let add = {{ (+) }};
let sub = {{ (-) }};

print "Proving fe_neg...";
crucible_llvm_verify m (fname "fe_neg") [] false (fe_unop_spec neg) yices;

print "Proving fe_add...";
crucible_llvm_verify m (fname "fe_add") [] false (fe_binop_spec add) yices;

print "Proving fe_sub...";
crucible_llvm_verify m (fname "fe_sub") [] false (fe_binop_spec sub) yices;
