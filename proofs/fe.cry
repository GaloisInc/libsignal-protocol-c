import Cryptol::Extras

value : [10][32] -> [512]
value [x0,x1,x2,x3,x4,x5,x6,x7,x8,x9] =
  extendSigned x0 +
  extendSigned x1 * (1 <<  26) +
  extendSigned x2 * (1 <<  51) +
  extendSigned x3 * (1 <<  77) +
  extendSigned x4 * (1 << 102) +
  extendSigned x5 * (1 << 128) +
  extendSigned x6 * (1 << 153) +
  extendSigned x7 * (1 << 179) +
  extendSigned x8 * (1 << 204) +
  extendSigned x9 * (1 << 230)

ref_mul : [10][32] -> [10][32] -> [10][32]
ref_mul = undefined

bound : [32] -> [32] -> Bit
bound b x = -b <= x /\ x <= b

valid_fe : [32] -> [32] -> [10][32] -> Bit
valid_fe even odd fe =
  be (fe@0) /\ bo (fe@1) /\
  be (fe@2) /\ bo (fe@3) /\
  be (fe@4) /\ bo (fe@5) /\
  be (fe@6) /\ bo (fe@7) /\
  be (fe@8) /\ bo (fe@9)
    where
      be = bound even
      bo = bound odd

e24     = 18454938        // roundup(1.1  * 2^24)
e25     = 36909876        // roundup(1.1  * 2^25)
e26     = 73819751        // roundup(1.1  * 2^26)
m25     = 55364812        // roundup(1.65 * 2^25)
m26     = 110729626       // roundup(1.65 * 2^26)
m24post = 33889977        // roundup(1.01 * 2^24)
m25post = 16944989        // roundup(1.01 * 2^25)

add_valid_fe = valid_fe e25 e24
mul_valid_fe = valid_fe m26 m25

binop_good even odd valuefn fieldfn x y =
  valid_fe even odd x /\ valid_fe even odd y ==>
  value (fieldfn x y) == valuefn (value x) (value y)

property add_good x y = binop_good e25 e24 (+) (+) x y

property sub_good x y = binop_good e25 e24 (-) (-) x y

//property mul_good x y = binop_good m26 m25 (*) ref_mul x y
